ARG ARCH=amd64
ARG JDK=adoptopenjdk:11-jre-openj9-bionic
ARG BUILD_DATE
ARG BUILD_VERSION
ARG BUILD_REF
ARG ALLURE_RELEASE=NONE
ARG ALLURE_REPO=https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline
ARG UID=1000
ARG GID=1000
ARG PYTHON_VERSION=3.8

######

FROM python:${PYTHON_VERSION}-alpine AS dev_stage
RUN apk update
RUN apk add build-base
RUN pip install -U pylint
RUN pip install --upgrade pip setuptools wheel waitress && \
    pip install -Iv Flask==3.0.2 Flask-JWT-Extended==4.6.0 flask-swagger-ui==4.11.1 requests==2.31.0

ENV ROOT_DIR=/code
RUN mkdir -p $ROOT_DIR
WORKDIR $ROOT_DIR
COPY allure-docker-api $ROOT_DIR/allure-docker-api
RUN pylint --rcfile=allure-docker-api/.pylintrc allure-docker-api || true

######
FROM $JDK
ARG ARCH
ARG JDK
ARG BUILD_DATE
ARG BUILD_VERSION
ARG BUILD_REF
ARG ALLURE_RELEASE
ARG ALLURE_REPO
ARG UID
ARG GID
ARG PYTHON_VERSION=3.8

LABEL org.label-schema.build-date=${BUILD_DATE} \
    org.label-schema.docker.dockerfile="docker/Dockerfile.bionic-simple" \
    org.label-schema.license="MIT" \
    org.label-schema.name="Allure Framework" \
    org.label-schema.version=${BUILD_VERSION} \
    org.label-schema.description="Allure Framework is a flexible lightweight multi-language test report tool." \
    org.label-schema.url="https://docs.qameta.io/allure/" \
    org.label-schema.vcs-ref=${BUILD_REF} \
    org.label-schema.vcs-type="Git" \
    org.label-schema.vcs-url="https://github.com/fescobar/allure-docker-service" \
    org.label-schema.arch=${ARCH} \
    authors="Frank Escobar <fescobar.systems@gmail.com>, Raymond Mouthaan <raymondmmouthaan@gmail.com>"

# Skip QEMU for single architecture build

RUN apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
      tzdata \
      nano \
      python${PYTHON_VERSION} \
      python3-pip \
      python3-dev \
      unzip && \
    ln -s `which python3` /usr/bin/python && \
    pip3 install --upgrade pip && \
    python${PYTHON_VERSION} -m pip install --upgrade pip setuptools wheel waitress && \
    python${PYTHON_VERSION} -m pip install -v Flask==3.0.2 Flask-JWT-Extended==4.6.0 flask-swagger-ui==4.11.1 requests==2.31.0 && \
    curl ${ALLURE_REPO}/${ALLURE_RELEASE}/allure-commandline-${ALLURE_RELEASE}.zip -L -o /tmp/allure-commandline.zip && \
        unzip -q /tmp/allure-commandline.zip -d / && \
        apt-get remove -y unzip && \
        rm -rf /tmp/* && \
        rm -rf /var/lib/apt/lists/* && \
        chmod -R +x /allure-$ALLURE_RELEASE/bin && \
        mkdir -p /app

ENV ROOT=/app
ENV ALLURE_HOME="/allure-$ALLURE_RELEASE"
ENV ALLURE_HOME_SL="/allure"
ENV JAVA_OPTS="-Xmx2048m -Xms256m"
ENV PATH="$PATH:$ALLURE_HOME/bin"

RUN ln -s $ALLURE_HOME $ALLURE_HOME_SL
WORKDIR $ROOT

# Creating allure user
RUN groupadd --gid ${GID} allure \
  && useradd --uid ${UID} --gid allure --shell /bin/bash --create-home allure

# Copy the app
COPY --from=dev_stage $ROOT_DIR/allure-docker-api $ROOT/allure-docker-api
COPY allure-docker-scripts $ROOT
COPY --chown=allure:allure allure-docker-scripts/runAllureApp.sh $ROOT
RUN chmod +x $ROOT/runAllureApp.sh
RUN chmod +x $ROOT/*.sh

# Switching to allure user
USER allure

# Creating volume for results
VOLUME [ "/app/allure-results" ]

# Creating volume for reports
VOLUME [ "/app/allure-reports" ]

# Creating volume for projects
VOLUME [ "/app/projects" ]

# Env variables
ENV ALLURE_VERSION=$ALLURE_HOME/version
ENV STATIC_CONTENT=/app/allure-docker-api/static
ENV STATIC_CONTENT_PROJECTS=/app/projects
ENV PYTHONPATH=/app:$PYTHONPATH
ENV TZ="UTC"
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV PORT=5050
ENV EMAILABLE_REPORT_FILE_NAME=emailable-report-allure-docker-service.html
ENV CHECK_RESULTS_EVERY_SECONDS=NONE
ENV KEEP_HISTORY=1
ENV KEEP_HISTORY_LATEST=25

EXPOSE 5050

CMD ["/app/runAllureApp.sh"]
